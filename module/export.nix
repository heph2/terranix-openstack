{ config, lib, pkgs, ... }:
with lib;
let cfg = config.openstack.export;
in {
  options.openstack.export = {
    nix = mkOption {
      type = with types; nullOr str;
      default = null;
      description = ''
        Export openstack information as nix file.
        Useful when if you want to import run a NixOs
        script after the terraform.
      '';
    };
  };

  config = mkIf (cfg.nix != null) {
    resource.local_file = {
      openstack_export_nix = {
        content =
          let
            serverPart = name: ''
             ${name} = {
               host = {
                 ipv4 = "''${ openstack_compute_instance_v2.${name}.access_ip_v4 }";
                 ipv6 = "''${ openstack_compute_instance_v2.${name}.access_ip_v6 }";
                 ipv4-floating = "''${ openstack_compute_instance_v2.${name}.network/fixed_ip_v4 }";
                 ipv6-floating = "''${ openstack_compute_instance_v2.${name}.network/fixed_ip_v6 }";
               };
               location = "''${ openstack_compute_instance_v2.${name}.region}";
             };
           '';
            allServerParts = map serverPart (attrNames config.openstack.server);
          in
           ''
            # generated by terranix-openstack : openstack.export.nix
            # it lists every return value created
            # by the openstack provider in nix format
            # so you can import it in another nix-lang tool
            {


            # openstack servers:
            ${concatStringsSep "\n" allServerParts}
            }
          '';
        filename = cfg.nix;
      };
    };
  };
}
